# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'host.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
# from QtWidgets import QMessageBox
# from PyQt5.QtWidgets import QMessageBox
from listavailableports import avaliable_ports
from Helpers import *
import serial
import os
import time
name="STM32 Flasher"
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName(name)
        MainWindow.setWindowIcon(QtGui.QIcon("icon.png"))
        MainWindow.resize(762, 422)
        MainWindow.setStyleSheet("background-color: rgb(86, 175, 133);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 0, 91, 21))
        self.label.setStyleSheet("")
        self.label.setObjectName("label")

        self.SetVer = QtWidgets.QLabel(self.centralwidget)
        self.SetVer.setGeometry(QtCore.QRect(30, 20, 131, 21))
        self.SetVer.setStyleSheet("background-color: rgb(238, 238, 236);")
        self.SetVer.setText("")
        self.SetVer.setObjectName("SetVer")

        self.GetVer = QtWidgets.QPushButton(self.centralwidget)
        self.GetVer.setGeometry(QtCore.QRect(190, 20, 89, 21))
        self.GetVer.setObjectName("GetVer")
        self.GetVer.clicked.connect(self.getver_clicked)

        self.SetCmds = QtWidgets.QListWidget(self.centralwidget)
        self.SetCmds.setGeometry(QtCore.QRect(310, 50, 256, 181))
        self.SetCmds.setStyleSheet("background-color: rgb(238, 238, 236);")
        self.SetCmds.setObjectName("SetCmds")
        self.GetCmds = QtWidgets.QPushButton(self.centralwidget)
        self.GetCmds.setGeometry(QtCore.QRect(310, 20, 251, 21))
        self.GetCmds.setObjectName("GetCmds")
        self.GetCmds.clicked.connect(self.getcmds_clicked)

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(30, 60, 101, 17))
        self.label_2.setObjectName("label_2")

        self.SetRdp = QtWidgets.QLabel(self.centralwidget)
        self.SetRdp.setGeometry(QtCore.QRect(30, 80, 131, 21))
        self.SetRdp.setStyleSheet("background-color: rgb(238, 238, 236);")
        self.SetRdp.setText("")
        self.SetRdp.setObjectName("SetRdp")
        
        self.GetRdp = QtWidgets.QPushButton(self.centralwidget)
        self.GetRdp.setGeometry(QtCore.QRect(190, 80, 89, 21))
        self.GetRdp.setObjectName("GetRdp")
        self.GetRdp.clicked.connect(self.getrdp_clicked)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(30, 120, 67, 17))
        self.label_3.setObjectName("label_3")
        
        self.SetCid = QtWidgets.QLabel(self.centralwidget)
        self.SetCid.setGeometry(QtCore.QRect(30, 140, 131, 21))
        self.SetCid.setStyleSheet("background-color: rgb(238, 238, 236);")
        self.SetCid.setText("")
        self.SetCid.setObjectName("SetCid")
        
        self.GetCid = QtWidgets.QPushButton(self.centralwidget)
        self.GetCid.setGeometry(QtCore.QRect(190, 140, 89, 21))
        self.GetCid.setObjectName("GetCid")
        self.GetCid.clicked.connect(self.getcid_clicked)
        
        self.SetAdress = QtWidgets.QLineEdit(self.centralwidget)
        self.SetAdress.setGeometry(QtCore.QRect(30, 200, 131, 22))
        self.SetAdress.setStyleSheet("background-color: rgb(238, 238, 236);")
        self.SetAdress.setObjectName("SetAdress")
        

        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(30, 180, 111, 17))
        self.label_5.setObjectName("label_5")
        
        self.JumpAdrr = QtWidgets.QPushButton(self.centralwidget)
        self.JumpAdrr.setGeometry(QtCore.QRect(190, 200, 89, 21))
        self.JumpAdrr.setObjectName("JumpAdrr")
        self.JumpAdrr.clicked.connect(self.JumpAdrrclicked)
        
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(30, 250, 91, 17))
        self.label_6.setObjectName("label_6")
        
        self.GetSectorNo = QtWidgets.QLineEdit(self.centralwidget)
        self.GetSectorNo.setGeometry(QtCore.QRect(170, 270, 113, 21))
        self.GetSectorNo.setStyleSheet("background-color: rgb(238, 238, 236);")
        self.GetSectorNo.setObjectName("GetSectorNo")
        
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(30, 270, 111, 21))
        self.label_4.setObjectName("label_4")
        
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(30, 300, 131, 17))
        self.label_7.setObjectName("label_7")
        
        self.GetNofSector = QtWidgets.QLineEdit(self.centralwidget)
        self.GetNofSector.setGeometry(QtCore.QRect(170, 300, 113, 21))
        self.GetNofSector.setStyleSheet("background-color: rgb(238, 238, 236);")
        self.GetNofSector.setObjectName("GetNofSector")
        
        self.FlashErase = QtWidgets.QPushButton(self.centralwidget)
        self.FlashErase.setGeometry(QtCore.QRect(170, 330, 111, 25))
        self.FlashErase.setObjectName("FlashErase")
        self.FlashErase.clicked.connect(self.flasherase_clicked)
        
        self.SectorEraseInform=QtWidgets.QMessageBox()
        self.SectorEraseInform.setWindowTitle("Flash Erase")
        self.SectorEraseInform.setIcon(QtWidgets.QMessageBox.Information)
        self.SectorEraseInform.setText("Flash erased Succesfully")


        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(310, 250, 91, 17))
        self.label_8.setObjectName("label_8")
        
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(310, 276, 111, 21))
        self.label_9.setObjectName("label_9")
        
        self.GetPath2Bin = QtWidgets.QLineEdit(self.centralwidget)
        self.GetPath2Bin.setGeometry(QtCore.QRect(420, 276, 271, 25))
        self.GetPath2Bin.setStyleSheet("background-color: rgb(238, 238, 236);")
        self.GetPath2Bin.setObjectName("GetPath2Bin")

        self.PathNotFoundpopup=QtWidgets.QMessageBox()
        self.PathNotFoundpopup.setWindowTitle("Error to Path Binary")
        self.PathNotFoundpopup.setText("Path is incorrect")
        self.PathNotFoundpopup.setIcon(QtWidgets.QMessageBox.Critical)

        self.BinaryNotFoundpopup=QtWidgets.QMessageBox()
        self.BinaryNotFoundpopup.setWindowTitle("Error to load bin")
        self.BinaryNotFoundpopup.setText("Binary not found\nPlease make sure to correct path is given")
        self.BinaryNotFoundpopup.setIcon(QtWidgets.QMessageBox.Critical)

        self.JumpAdrrInvalid=QtWidgets.QMessageBox()
        self.JumpAdrrInvalid.setWindowTitle("Error")
        self.JumpAdrrInvalid.setText("Invalid adresss to jump\n")
        self.JumpAdrrInvalid.setIcon(QtWidgets.QMessageBox.Critical)

        self.SectorInvalid=QtWidgets.QMessageBox()
        self.SectorInvalid.setWindowTitle("Error")
        self.SectorInvalid.setIcon(QtWidgets.QMessageBox.Critical)

        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(310, 310, 101, 17))
        self.label_10.setObjectName("label_10")
        
        self.GetMemWriteAdress = QtWidgets.QLineEdit(self.centralwidget)
        self.GetMemWriteAdress.setGeometry(QtCore.QRect(420, 310, 113, 23))
        self.GetMemWriteAdress.setStyleSheet("background-color: rgb(238, 238, 236);")
        self.GetMemWriteAdress.setObjectName("GetMemWriteAdress")
        
        self.memadrrinvalid=QtWidgets.QMessageBox()
        self.memadrrinvalid.setWindowTitle("Error")
        self.memadrrinvalid.setText("Invalid memory adress to write")
        self.memadrrinvalid.setIcon(QtWidgets.QMessageBox.Critical)


        self.StartProg = QtWidgets.QPushButton(self.centralwidget)
        self.StartProg.setGeometry(QtCore.QRect(420, 340, 131, 21))
        self.StartProg.setObjectName("StartProg")
        self.StartProg.clicked.connect(self.startprog_clicked)
        
        self.informMemWriteCompleted=QtWidgets.QMessageBox()
        self.informMemWriteCompleted.setWindowTitle("Mem Write")
        self.informMemWriteCompleted.setText("Memory write is completed")
        self.informMemWriteCompleted.setIcon(QtWidgets.QMessageBox.Information)

        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(420, 370, 118, 23))
        self.progressBar.setStyleSheet("background-color: rgb(237, 212, 0);")
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.progressBar.setValue(0)

        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(250, 370, 151, 21))
        self.label_11.setObjectName("label_11")
        
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(590, 80, 91, 21))
        self.label_12.setObjectName("label_12")
        
        self.DisConnect = QtWidgets.QPushButton(self.centralwidget)
        self.DisConnect.setGeometry(QtCore.QRect(668, 50, 91, 25))
        self.DisConnect.setObjectName("DisConnect")
        self.DisConnect.clicked.connect(self.disconnect_clicked)

        self.ListPorts = QtWidgets.QComboBox(self.centralwidget)
        self.ListPorts.setGeometry(QtCore.QRect(580, 20, 86, 25))
        self.ListPorts.setStyleSheet("background-color: rgb(238, 238, 236);")
        self.ListPorts.setObjectName("ListPorts")
       
        self.ports=avaliable_ports()
        for port in self.ports:
            self.ListPorts.addItem(port)
        self.ser=serial.Serial()

        self.UpdatePortList=QtCore.QTimer()
        self.UpdatePortList.timeout.connect(self.UpdateCurrentPorts)
        self.UpdatePortList.start(1000)

        self.StatusTimer=QtCore.QTimer()
        self.StatusTimer.timeout.connect(self.StatusUpdate)
        self.StatusTimer.start(1000)

        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(580, 0, 81, 17))
        self.label_13.setObjectName("label_13")
        
        self.connect = QtWidgets.QPushButton(self.centralwidget)
        self.connect.setGeometry(QtCore.QRect(670, 20, 89, 25))
        self.connect.setObjectName("connect")
        self.connect.clicked.connect(self.connect_clicked)

        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(590, 100, 81, 20))
        self.label_14.setStyleSheet("background-color: rgb(238, 238, 236);")
        self.label_14.setText("")
        self.label_14.setObjectName("label_14")
        
        self.ClearAll = QtWidgets.QPushButton(self.centralwidget)
        self.ClearAll.setGeometry(QtCore.QRect(640, 370, 89, 25))
        self.ClearAll.setObjectName("ClearAll")
        self.ClearAll.clicked.connect(self.clearall_clicked)

        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate(name, name))
        self.label.setText(_translate(name, "Version "))
        self.GetVer.setText(_translate(name, "Get Version"))
        self.GetCmds.setText(_translate(name, "Get Supported Commands"))
        self.label_2.setText(_translate(name, "RDP Level"))
        self.GetRdp.setText(_translate(name, "Get RDP"))
        self.label_3.setText(_translate(name, "Chip ID"))
        self.GetCid.setText(_translate(name, "Get Chip ID"))
        self.label_5.setText(_translate(name, "Jump to addr"))
        self.JumpAdrr.setText(_translate(name, "Jump"))
        self.label_6.setText(_translate(name, "Flash Erase"))
        self.label_4.setText(_translate(name, "Sector Number"))
        self.label_7.setText(_translate(name, "Number of Sector"))
        self.FlashErase.setText(_translate(name, "Flash Erase"))
        self.label_8.setText(_translate(name, "Flash Binary"))
        self.label_9.setText(_translate(name, "Path To Binary"))
        self.label_10.setText(_translate(name, "Start Adress"))
        self.StartProg.setText(_translate(name, "Start to Program"))
        self.label_11.setText(_translate(name, "Downloaded to Board"))
        self.label_12.setText(_translate(name, "Port Status"))
        self.DisConnect.setText(_translate(name, "Disconnect"))
        self.label_13.setText(_translate(name, "Active Ports"))
        self.connect.setText(_translate(name, "Connect"))
        self.ClearAll.setText(_translate(name, "Clear All"))

    def UpdateCurrentPorts(self):
        self.ports=avaliable_ports()
        if self.ser.is_open:
            self.ports.append(self.openport)
        self.ListPorts.clear()
        for it in self.ports:
            self.ListPorts.addItem(it)
        if self.ser.is_open:
            self.ListPorts.setCurrentText(self.openport)
        
    def connect_clicked(self):
        port=self.ListPorts.currentText()
        if (len(port) !=0 and (not self.ser.is_open)):
            self.openport=port
            self.ser=serial.Serial(self.openport, 115200, timeout=0,parity=serial.PARITY_NONE, rtscts=1)
            
    def disconnect_clicked(self):
        if self.ser.is_open:
            self.ser.close()
            if not self.ser.closed:
                self.openport=None
    def StatusUpdate(self):
        if self.ser.is_open:
            self.label_14.setText("Opened")
        else:
            self.label_14.setText("Closed")
    def startprog_clicked(self):
        path=r""+self.GetPath2Bin.text()
        if(len(path)!=0):
            try :
                os.chdir(path)
            except FileNotFoundError:
                self.PathNotFoundpopup.exec_()
            files=os.listdir(os.getcwd())
            bins=[]
            for file in files:
                if ".bin" in file:
                    bins.append(file)
            if len(bins)==0:
                self.BinaryNotFoundpopup.exec_()
            else:
                startaddr=self.GetMemWriteAdress.text()
                if len(startaddr)<1:
                    self.memadrrinvalid.exec_()
                else:
                    self.memwrite(bins[0],int(startaddr,16))

    def getver_clicked(self):
        getVersion(self.ser)
        version=getReply(self.ser,BL_CMD_GET_VERSION)
        if type(version) is str:
            self.SetVer.setText(version)
        
    def getrdp_clicked(self):
        getRDP(self.ser)
        rdp=getReply(self.ser,BL_CMD_GET_RDP_STATUS)
        if type(rdp) is str:
            self.SetRdp.setText(hex(int(rdp)))

    def getcid_clicked(self):
        getCID(self.ser)
        cid=getReply(self.ser,BL_CMD_GET_CID)
        if type(cid) is str:
            self.SetCid.setText(hex(int(cid)))

    def getcmds_clicked(self):
        getSCMDS(self.ser)
        if self.ser.is_open:
            ackrep=self.ser.readline().decode("utf-8")
            if "165" in ackrep:
                replylen=int(ackrep.split("-")[2])
                rep=self.ser.read(replylen).decode("utf-8").split("-")
                if str(50) in rep:
                    self.SetCmds.clear()
                    rep.pop(0)
                    for c in rep:
                        self.SetCmds.addItem(cmd_names[int(c)-0x51])

    def JumpAdrrclicked(self):
        addr=self.SetAdress.text()
        if(len(addr)>0):
            self.ser.reset_input_buffer()
            self.ser.reset_output_buffer()
            addr=int(addr,16)
            JUMPaddrr(self.ser,addr)
            print(self.ser.readline().decode("utf-8"))
        else:
            self.JumpAdrrInvalid.exec_()
    def flasherase_clicked(self):
        SectorNo=self.GetSectorNo.text()
        NofSector=self.GetNofSector.text()
        
        if  len(SectorNo)>0 and len(NofSector)>0:
            SectorNo=int(SectorNo)
            NofSector=int(NofSector)
            if(NofSector<=0 or SectorNo<0):
                self.SectorInvalid.setText("Sector Number or Number of Sector cannot be negative")
                self.SectorInvalid.exec_()
            else:
                if self.ser.is_open:
                    eraseSector(self.ser,SectorNo,NofSector)
                    repack=self.ser.readline().decode("utf-8")
                    if "165" in repack:
                        self.SectorEraseInform.exec_()
        else:
            self.SectorInvalid.setText("Invalid Sector Number or Number of Sector")
            self.SectorInvalid.exec_()

    def memwrite(self,binfile,baseaddr):
        if self.ser.is_open:
            self.ser.reset_output_buffer()
            self.ser.reset_output_buffer()
            f=open(binfile,"rb")
            fsize=get_sizeof_file(binfile)
            j=0
            while True:
                databuff=[]
                for i in range(150):
                    databuff.append(0)
                s=bytearray(f.read(100))
                if not s:
                    break
                payload_len=len(s)
                length_of_package=(11+payload_len)
                databuff[0]=str(length_of_package-1)
                databuff[1]=str(BL_CMD_MEM_WRITE)
                databuff[2]=word_to_byte(baseaddr,1,1)
                databuff[3]=word_to_byte(baseaddr,2,1)
                databuff[4]=word_to_byte(baseaddr,3,1)
                databuff[5]=word_to_byte(baseaddr,4,1)
                databuff[6]=payload_len
                baseaddr+=payload_len
                for i in range(payload_len):
                    databuff[7+i]=s[i]
                bb=databuff[7:payload_len+7]
                crc32       = get_crc(bb,payload_len)
                crc32 = crc32 & 0xffffffff
                databuff[7+payload_len] = word_to_byte(crc32,1,1)
                databuff[8+payload_len] = word_to_byte(crc32,2,1)
                databuff[9+payload_len] = word_to_byte(crc32,3,1)
                databuff[10+payload_len] = word_to_byte(crc32,4,1)
                write2ser(self.ser,int(databuff[0]))
                for i_byte in databuff[1:length_of_package]:
                    write2ser(self.ser,int(i_byte))
                rep_n=str(self.ser.readline()).split('-')
                if len(rep_n)>1:
                    if(int(rep_n[1])==165):
                        j=j+payload_len
                        self.progressBar.setValue((int((j/fsize)*100)))
                        if (j+100)==fsize:
                            self.progressBar.setValue(100)
                            self.informMemWriteCompleted.exec_()
                time.sleep(0.1)

        

    def clearall_clicked(self):
        self.SetRdp.clear()
        self.SetVer.clear()
        self.SetCid.clear()
        self.SetCmds.clear()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    
    MainWindow.show()
    if ui.ser.is_open:
        ui.ser.close()
    sys.exit(app.exec_())
